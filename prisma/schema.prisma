datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Producto {
    id_producto  Int               @id @default(autoincrement())
    nombre       String
    precio       Float
    id_categoria Int
    categoria    CategoriaProducto @relation(fields: [id_categoria], references: [id_categoria])
    ventas       Venta[]
}

model CategoriaProducto {
    id_categoria Int        @id @default(autoincrement())
    nombre       String
    productos    Producto[]
}

model Tienda {
    id_tienda Int     @id @default(autoincrement())
    nombre    String
    ubicacion String
    ventas    Venta[]
}

model Venta {
    id_venta    Int      @id @default(autoincrement())
    id_producto Int
    id_tienda   Int
    cantidad    Int
    fecha_venta DateTime
    producto    Producto @relation(fields: [id_producto], references: [id_producto])
    tienda      Tienda   @relation(fields: [id_tienda], references: [id_tienda])
}
